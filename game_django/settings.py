"""
Django settings for game_django project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv  # 导入 load_dotenv 用于加载 .env 文件

# 加载 .env 文件中的环境变量
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-3#l(i8z(k+laq&l57(q-ywo$aoz+%5cbp4nzv2_^hhez-mpnpd"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # django内置应用程序
    'django.contrib.admin',         # <--- Django 管理后台应用
    'django.contrib.auth',          # 认证框架
    'django.contrib.contenttypes',  # 内容类型框架 (被其他应用使用)
    'django.contrib.sessions',      # 会话框架
    'django.contrib.messages',      # 消息框架
    'django.contrib.staticfiles',   # 管理静态文件 (CSS, JavaScript, Images)
    'django.contrib.sites',  # dj-rest-auth/allauth 依赖的站点框架

    # 自定义应用程序
    'gamecore.apps.GamecoreConfig',  # gamecore应用配置

    # 第三方库
    'rest_framework',  # Django REST framework
    'rest_framework.authtoken',  # Django REST framework 的 token 认证
    'dj_rest_auth',  # Django REST framework 的认证和注册视图
    'dj_rest_auth.registration',  # Django REST framework 的注册视图
    'allauth',  # Django allauth 框架\
    'allauth.account',  # Django allauth 框架的账户应用
    'allauth.socialaccount',  # Django allauth 框架的社交账户应用
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # 添加 allauth 中间件
]

ROOT_URLCONF = "game_django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "game_django.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),             # 从环境变量读取
        'USER': os.getenv('DB_USER'),             # 从环境变量读取
        'PASSWORD': os.getenv('DB_PASSWORD'),       # 从环境变量读取
        'HOST': os.getenv('DB_HOST', 'localhost'),  # 从环境变量读取, 如果没有则默认为 'localhost'
        'PORT': os.getenv('DB_PORT', '3306'),     # 从环境变量读取, 如果没有则默认为 '3306'
        'OPTIONS': {
            'charset': 'utf8mb4',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 配置媒体文件存储
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# --- django-allauth 配置 ---
SITE_ID = 1

# 允许使用用户名或邮箱登录
ACCOUNT_LOGIN_METHODS = {'email', 'username'}

# 明确要求在注册时必须提供邮箱和用户名
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']

# 在开发阶段，我们暂时关闭邮件验证流程
ACCOUNT_EMAIL_VERIFICATION = 'none'

# 配置 dj-rest-auth 认证方式为 token 认证
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 1. SessionAuthentication: 允许在可浏览 API 中使用 Django 的 session 登录
        'rest_framework.authentication.SessionAuthentication',
        # 2. TokenAuthentication: 允许前端应用通过发送 Token 来进行认证
        'rest_framework.authentication.TokenAuthentication',
    ],
}